{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "The AWS CloudFormation template for this Serverless application",
    "Resources": {
        "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                }
            }
        },
        "HelloLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/curso-sls-crud-rds-dev-hello"
            }
        },
        "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "-",
                                [
                                    "dev",
                                    "curso-sls-crud-rds",
                                    "lambda"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogStream"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/curso-sls-crud-rds-dev*:*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/curso-sls-crud-rds-dev*:*:*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "Path": "/",
                "RoleName": {
                    "Fn::Join": [
                        "-",
                        [
                            "curso-sls-crud-rds",
                            "dev",
                            {
                                "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                        ]
                    ]
                }
            }
        },
        "HelloLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                    },
                    "S3Key": "serverless/curso-sls-crud-rds/dev/1561753387473-2019-06-28T20:23:07.473Z/curso-sls-crud-rds.zip"
                },
                "FunctionName": "curso-sls-crud-rds-dev-hello",
                "Handler": "handler.hello",
                "MemorySize": 1024,
                "Role": {
                    "Fn::GetAtt": [
                        "IamRoleLambdaExecution",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs10.x",
                "Timeout": 6
            },
            "DependsOn": [
                "HelloLogGroup",
                "IamRoleLambdaExecution"
            ]
        },
        "HelloLambdaVersionlsCTXxN9q2tLEu207dMEPiAT4BVGi59n0sYFWX1ds": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
                "FunctionName": {
                    "Ref": "HelloLambdaFunction"
                },
                "CodeSha256": "jB0a3QKmgpZrEgUR2VaGq4p9Ek4WmAfQ4S2W50yyXnY="
            }
        },
        "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": "dev-curso-sls-crud-rds",
                "EndpointConfiguration": {
                    "Types": [
                        "EDGE"
                    ]
                }
            }
        },
        "ApiGatewayResourceHelloDashworld": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "ApiGatewayRestApi",
                        "RootResourceId"
                    ]
                },
                "PathPart": "hello-world",
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodHelloDashworldOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true,
                            "method.response.header.Access-Control-Allow-Credentials": true
                        },
                        "ResponseModels": {}
                    }
                ],
                "RequestParameters": {},
                "Integration": {
                    "Type": "MOCK",
                    "RequestTemplates": {
                        "application/json": "{statusCode:200}"
                    },
                    "ContentHandling": "CONVERT_TO_TEXT",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                                "method.response.header.Access-Control-Allow-Credentials": "'false'"
                            },
                            "ResponseTemplates": {
                                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                            }
                        }
                    ]
                },
                "ResourceId": {
                    "Ref": "ApiGatewayResourceHelloDashworld"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                }
            }
        },
        "ApiGatewayMethodHelloDashworldGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                    "Ref": "ApiGatewayResourceHelloDashworld"
                },
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "HelloLambdaFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": []
            }
        },
        "ApiGatewayDeployment1561753382689": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
                "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
            },
            "DependsOn": [
                "ApiGatewayMethodHelloDashworldOptions",
                "ApiGatewayMethodHelloDashworldGet"
            ]
        },
        "HelloLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "HelloLambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                        ]
                    ]
                }
            }
        }
    },
    "Outputs": {
        "ServerlessDeploymentBucketName": {
            "Value": {
                "Ref": "ServerlessDeploymentBucket"
            }
        },
        "HelloLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
                "Ref": "HelloLambdaVersionlsCTXxN9q2tLEu207dMEPiAT4BVGi59n0sYFWX1ds"
            }
        },
        "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Ref": "ApiGatewayRestApi"
                        },
                        ".execute-api.",
                        {
                            "Ref": "AWS::Region"
                        },
                        ".",
                        {
                            "Ref": "AWS::URLSuffix"
                        },
                        "/dev"
                    ]
                ]
            }
        }
    }
}